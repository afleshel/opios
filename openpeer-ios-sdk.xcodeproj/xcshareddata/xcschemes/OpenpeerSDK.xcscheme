<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "0610"
   version = "1.7">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <PostActions>
         <ExecutionAction
            ActionType = "Xcode.IDEStandardExecutionActionsCore.ExecutionActionType.ShellScriptAction">
            <ActionContent
               title = "Run Script"
               scriptText = "DATE=$( /bin/date +&quot;%Y-%m-%d&quot; )&#10;TIME=$( /bin/date +&quot;%H-%M-%S&quot; )&#10;&#10;LOG=&quot;${HOME}/build_logs/SDK/build_log_${PRODUCT_NAME}_DEV_{$FRAMEWORK_VERSION}_${DYLIB_CURRENT_VERSION}_${DATE}_${TIME}.txt&quot;&#10;&#10;echo &quot;info: Configuration is ${CONFIGURATION}&quot; &gt; $LOG&#10;&#10;if [ &quot;${CONFIGURATION}&quot; = &quot;Debug&quot; ]; then&#10;&#10;FRAMEWORK_NAME=&quot;${PRODUCT_NAME}.framework&quot;&#10;echo &quot;info: Framework name is ${FRAMEWORK_NAME}&quot; &gt;&gt; $LOG&#10;&#10;FRAMEWORK_PATH=&quot;${PROJECT_DIR}/${FRAMEWORK_NAME}&quot;&#10;echo &quot;info: Framework path is ${FRAMEWORK_PATH}&quot; &gt;&gt; $LOG&#10;&#10;CURL_LIB_PATH=&quot;${PROJECT_DIR}/../libs/curl/curl/ios-appstore/lib/libcurl.a&quot;&#10;echo &quot;info: curl lib path is ${CURL_LIB_PATH}&quot; &gt;&gt; $LOG&#10;&#10;# Delete old framework folder&#10;rm -rf &quot;${BUILT_PRODUCTS_DIR}/${FRAMEWORK_NAME}&quot;&#10;&#10;mkdir -p &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/Headers&quot;&#10;mkdir -p &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/Libraries&quot;&#10;mkdir -p &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/Resources&quot;&#10;&#10;# Link the &quot;Current&quot; version to &quot;C&quot;&#10;/bin/ln -sfh ${FRAMEWORK_VERSION} &quot;${FRAMEWORK_PATH}/Versions/Current&quot;&#10;/bin/ln -sfh Versions/Current/Headers &quot;${FRAMEWORK_PATH}/Headers&quot;&#10;/bin/ln -sfh Versions/Current/Libraries &quot;${FRAMEWORK_PATH}/Libraries&quot;&#10;/bin/ln -sfh Versions/Current/Resources &quot;${FRAMEWORK_PATH}/Resources&quot;&#10;/bin/ln -sfh &quot;Versions/Current/${PRODUCT_NAME}&quot; &quot;${FRAMEWORK_PATH}/${PRODUCT_NAME}&quot;&#10;&#10;&#10;echo &quot;info: Target build path is ${TARGET_BUILD_DIR}&quot; &gt;&gt; $LOG&#10;echo &quot;info: Public header path is ${PUBLIC_HEADERS_FOLDER_PATH}&quot; &gt;&gt; $LOG&#10;&#10;# The -a ensures that the headers maintain the source modification date so that we don&apos;t constantly&#10;# cause propagating rebuilds of files that import these headers.&#10;/bin/cp -a &quot;${TARGET_BUILD_DIR}/${PUBLIC_HEADERS_FOLDER_PATH}/&quot; &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/Headers&quot;&#10;#/bin/cp -a &quot;${OBJROOT}/UninstalledProducts/${PUBLIC_HEADERS_FOLDER_PATH}/&quot; &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/Headers&quot;&#10;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: Copying header files has failed&quot; &gt;&gt; $LOG&#10;exit 1&#10;else&#10;echo &quot;info: Header files has been copied successfully&quot; &gt;&gt; $LOG&#10;fi&#10;&#10;/bin/cp -a &quot;${CURL_LIB_PATH}&quot; &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/Libraries&quot;&#10;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: Copying curl library has failed&quot; &gt;&gt; $LOG&#10;exit 1&#10;else&#10;echo &quot;info: Curl library files has been copied successfully&quot; &gt;&gt; $LOG&#10;fi&#10;&#10;/bin/cp -R  &quot;${TARGET_BUILD_DIR}/${PUBLIC_RESOURCES_FOLDER_PATH}/OpenpeerDataModel.bundle&quot; &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/Resources&quot;&#10;#/bin/cp -R  &quot;${OBJROOT}/UninstalledProducts/OpenpeerDataModel.bundle&quot; &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/Resources&quot;&#10;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: Copying data model has failed&quot; &gt;&gt; $LOG&#10;exit 1&#10;else&#10;echo &quot;info: Data model has been copied successfully&quot; &gt;&gt; $LOG&#10;fi&#10;&#10;/bin/cp -a &quot;${TARGET_BUILD_DIR}/lib${PRODUCT_NAME}.a&quot; &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/${PRODUCT_NAME}&quot;&#10;#/bin/cp -a &quot;${OBJROOT}/UninstalledProducts/lib${PRODUCT_NAME}.a&quot; &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/${PRODUCT_NAME}&quot;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: Copying openpeer SDK static library has failed&quot; &gt;&gt; $LOG&#10;exit 1&#10;else&#10;echo &quot;info: Openpeer SDK static library has been copied successfully&quot; &gt;&gt; $LOG&#10;fi&#10;&#10;fi&#10;">
               <EnvironmentBuildable>
                  <BuildableReference
                     BuildableIdentifier = "primary"
                     BlueprintIdentifier = "8792E86716519CFF00DEAC58"
                     BuildableName = "libOpenPeerSDK.a"
                     BlueprintName = "OpenPeerSDK"
                     ReferencedContainer = "container:openpeer-ios-sdk.xcodeproj">
                  </BuildableReference>
               </EnvironmentBuildable>
            </ActionContent>
         </ExecutionAction>
      </PostActions>
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "8792E86716519CFF00DEAC58"
               BuildableName = "libOpenPeerSDK.a"
               BlueprintName = "OpenPeerSDK"
               ReferencedContainer = "container:openpeer-ios-sdk.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES"
      buildConfiguration = "Debug">
      <Testables>
      </Testables>
   </TestAction>
   <LaunchAction
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      buildConfiguration = "Debug"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      allowLocationSimulation = "YES">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "8792E86716519CFF00DEAC58"
            BuildableName = "libOpenPeerSDK.a"
            BlueprintName = "OpenPeerSDK"
            ReferencedContainer = "container:openpeer-ios-sdk.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
      <AdditionalOptions>
      </AdditionalOptions>
   </LaunchAction>
   <ProfileAction
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      buildConfiguration = "Release"
      debugDocumentVersioning = "YES">
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
      <PostActions>
         <ExecutionAction
            ActionType = "Xcode.IDEStandardExecutionActionsCore.ExecutionActionType.ShellScriptAction">
            <ActionContent
               title = "Run Script"
               scriptText = "DATE=$( /bin/date +&quot;%Y-%m-%d&quot; )&#10;TIME=$( /bin/date +&quot;%H-%M-%S&quot; )&#10;&#10;BUILD_VERSION_FILE_PATH=&quot;${HOME}/build_tools/version.txt&quot;&#10;VERSION_NUMBER=&quot;0&quot;&#10;&#10;if [ -f ${BUILD_VERSION_FILE_PATH} ]; then&#10;VERSION_NUMBER=$(cat ${BUILD_VERSION_FILE_PATH})&#10;fi&#10;&#10;LOG=&quot;${HOME}/build_logs/SDK/build_log_${PRODUCT_NAME}_{$FRAMEWORK_VERSION}_${DYLIB_CURRENT_VERSION}_${VERSION_NUMBER}_${DATE}_${TIME}.txt&quot;&#10;&#10;echo &quot;info: Version file path is ${BUILD_VERSION_FILE_PATH}&quot; &gt; $LOG&#10;echo &quot;info: Old build version number is ${VERSION_NUMBER}&quot; &gt;&gt; $LOG&#10;&#10;OPENPEER_REGISTERED_APPLICATION_NAME=&quot;sampleapp&quot;&#10;OPENPEER_REGISTERED_APPLICATION_ID=&quot;sampleapp.hookflash.com&quot;&#10;OPENPEER_REGISTERED_APPLICATION_SHARED_SECRET=&quot;22qcbjdmts740-i1kg62kp&quot;&#10;OPENPEER_REGISTERED_APPLICATION_UPLOAD_PATH=&quot;&quot;&#10;OPENPEER_REGISTERED_APPLICATION_UA_KEY=&quot;&quot;&#10;OPENPEER_REGISTERED_APPLICATION_UA_APP_SECRET=&quot;&quot;&#10;OPENPEER_REGISTERED_APPLICATION_UA_MASTER_SECRET=&quot;&quot;&#10;OPENPEER_REGISTERED_APPLICATION_UPLOAD_UA_URL=&quot;&quot;&#10;&#10;SAMPLEPROJECT_PATH=&quot;${PROJECT_DIR}/Samples/OpenPeerSampleApp&quot;&#10;echo &quot;info: Sample project path is ${SAMPLEPROJECT_PATH}&quot; &gt;&gt; $LOG&#10;&#10;UPLOAD_URL=$(/usr/libexec/PlistBuddy -c &quot;Print :applicationReleaseUploadPath&quot; &quot;${SAMPLEPROJECT_PATH}/OpenPeerSampleApp/CustomerSpecific.plist&quot;)&#10;echo &quot;info: Upload URL is ${UPLOAD_URL}&quot; &gt;&gt; $LOG&#10;&#10;UPLOAD_URL_SIZE=${#UPLOAD_URL}&#10;&#10;echo &quot;info: Upload URL size is ${UPLOAD_URL_SIZE}&quot; &gt;&gt; $LOG&#10;&#10;&#10;FRAMEWORK_NAME=&quot;${PRODUCT_NAME}.${FRAMEWORK_VERSION}.${DYLIB_CURRENT_VERSION}.${VERSION_NUMBER}.framework&quot;&#10;echo &quot;info: Framework name is ${FRAMEWORK_NAME}&quot; &gt;&gt; $LOG&#10;&#10;FRAMEWORK_NAME_FOR_APP=&quot;${PRODUCT_NAME}.framework&quot;&#10;&#10;SAMPLEAPPLICATION_NAME=&quot;SampleApplicationWithSDK.${DYLIB_CURRENT_VERSION}.${VERSION_NUMBER}&quot;&#10;echo &quot;info: Sample application name is ${SAMPLEAPPLICATION_NAME}&quot; &gt;&gt; $LOG&#10;&#10;APPLICATION_PATH=&quot;${HOME}/Desktop/OpenpeerApplications/SDK&quot;&#10;echo &quot;info: Application path is ${APPLICATION_PATH}&quot; &gt;&gt; $LOG&#10;&#10;DESTINATION_PATH=&quot;${APPLICATION_PATH}/Builds&quot;&#10;echo &quot;info: Destination path is ${DESTINATION_PATH}&quot; &gt;&gt; $LOG&#10;&#10;DESTINATION_SAMPLE_PATH=&quot;${DESTINATION_PATH}/OpenPeer_${VERSION_NUMBER}&quot;&#10;echo &quot;info: Destination sample app path is ${DESTINATION_SAMPLE_PATH}&quot; &gt;&gt; $LOG&#10;&#10;VERSION_NUMBER=&quot;$(expr &quot;$VERSION_NUMBER&quot; &apos;+&apos; &apos;1&apos;)&quot;&#10;echo &quot;info: New build version number is ${VERSION_NUMBER}&quot; &gt;&gt; $LOG&#10;&#10;echo $VERSION_NUMBER &gt; $BUILD_VERSION_FILE_PATH&#10;&#10;#FRAMEWORK_PATH=&quot;${DESTINATION_PATH}/${FRAMEWORK_NAME}&quot;&#10;FRAMEWORK_PATH=&quot;${DESTINATION_PATH}/${FRAMEWORK_NAME_FOR_APP}&quot;&#10;echo &quot;info: Framework path is ${FRAMEWORK_PATH}&quot; &gt;&gt; $LOG&#10;&#10;BOOST_LIB_PATH=&quot;${PROJECT_DIR}/libs/op/libs/ortc-lib/libs/boost/ios/library/boost.a&quot;&#10;CURL_LIB_PATH=&quot;${PROJECT_DIR}/libs/op/libs/ortc-lib/libs/curl-build-scripts/curl/lib/libcurl.a&quot;&#10;#CURL_LIB_PATH=&quot;${PROJECT_DIR}/libs/op/libs/ortc-lib/libs/curl/staging/libcurl.a&quot;&#10;&#10;echo &quot;info: boost lib path is ${BOOST_LIB_PATH}&quot; &gt;&gt; $LOG&#10;echo &quot;info: curl lib path is ${CURL_LIB_PATH}&quot; &gt;&gt; $LOG&#10;&#10;# Delete old framework folder&#10;rm -rf &quot;${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.framework&quot;&#10;&#10;mkdir -p &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/Headers&quot;&#10;mkdir -p &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/Libraries&quot;&#10;mkdir -p &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/Resources&quot;&#10;&#10;# Link the &quot;Current&quot; version to &quot;C&quot;&#10;/bin/ln -sfh ${FRAMEWORK_VERSION} &quot;${FRAMEWORK_PATH}/Versions/Current&quot;&#10;/bin/ln -sfh Versions/Current/Headers &quot;${FRAMEWORK_PATH}/Headers&quot;&#10;/bin/ln -sfh Versions/Current/Libraries &quot;${FRAMEWORK_PATH}/Libraries&quot;&#10;/bin/ln -sfh Versions/Current/Resources &quot;${FRAMEWORK_PATH}/Resources&quot;&#10;/bin/ln -sfh &quot;Versions/Current/${PRODUCT_NAME}&quot; &quot;${FRAMEWORK_PATH}/${PRODUCT_NAME}&quot;&#10;&#10;echo &quot;info: Target build path is ${TARGET_BUILD_DIR}&quot; &gt;&gt; $LOG&#10;echo &quot;info: Public header path is ${PUBLIC_HEADERS_FOLDER_PATH}&quot; &gt;&gt; $LOG&#10;&#10;# The -a ensures that the headers maintain the source modification date so that we don&apos;t constantly&#10;# cause propagating rebuilds of files that import these headers.&#10;#/bin/cp -a &quot;${TARGET_BUILD_DIR}/${PUBLIC_HEADERS_FOLDER_PATH}/&quot; &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/Headers&quot;&#10;/bin/cp -a &quot;${OBJROOT}/UninstalledProducts/${PUBLIC_HEADERS_FOLDER_PATH}/&quot; &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/Headers&quot;&#10;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: Copying header files has failed&quot; &gt;&gt; $LOG&#10;exit 1&#10;else&#10;echo &quot;info: Header files has been copied successfully&quot; &gt;&gt; $LOG&#10;fi&#10;&#10;/bin/cp -a &quot;${BOOST_LIB_PATH}&quot; &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/Libraries&quot;&#10;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: Copying boost library has failed&quot; &gt;&gt; $LOG&#10;exit 1&#10;else&#10;echo &quot;info: Boost library files has been copied successfully&quot; &gt;&gt; $LOG&#10;fi&#10;&#10;/bin/cp -a &quot;${CURL_LIB_PATH}&quot; &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/Libraries&quot;&#10;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: Copying curl library has failed&quot; &gt;&gt; $LOG&#10;exit 1&#10;else&#10;echo &quot;info: Curl library files has been copied successfully&quot; &gt;&gt; $LOG&#10;fi&#10;&#10;#/bin/cp -R  &quot;${TARGET_BUILD_DIR}/${PUBLIC_RESOURCES_FOLDER_PATH}/OpenpeerDataModel.bundle&quot; &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/Resources&quot;&#10;/bin/cp -R  &quot;${OBJROOT}/UninstalledProducts/OpenpeerDataModel.bundle&quot; &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/Resources&quot;&#10;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: Copying data model has failed&quot; &gt;&gt; $LOG&#10;exit 1&#10;else&#10;echo &quot;info: Data model has been copied successfully&quot; &gt;&gt; $LOG&#10;fi&#10;&#10;#/bin/cp -a &quot;${TARGET_BUILD_DIR}/lib${PRODUCT_NAME}.a&quot; &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/${PRODUCT_NAME}&quot;&#10;/bin/cp -a &quot;${OBJROOT}/UninstalledProducts/lib${PRODUCT_NAME}.a&quot; &quot;${FRAMEWORK_PATH}/Versions/${FRAMEWORK_VERSION}/${PRODUCT_NAME}&quot;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: Copying openpeer SDK static library has failed&quot; &gt;&gt; $LOG&#10;exit 1&#10;else&#10;echo &quot;info: Openpeer SDK static library has been copied successfully&quot; &gt;&gt; $LOG&#10;fi&#10;&#10;#Delete old framework from sample project&#10;rm -rf &quot;${PROJECT_DIR}/${PRODUCT_NAME}.framework&quot;&#10;&#10;#Copy framework to sample project&#10;/bin/cp -a &quot;${FRAMEWORK_PATH}&quot; &quot;${PROJECT_DIR}/${PRODUCT_NAME}.framework&quot;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: Copying openpeer framework to sample app&quot; &gt;&gt; $LOG&#10;exit 1&#10;else&#10;echo &quot;info: Openpeer framework has been copied successfully&quot; &gt;&gt; $LOG&#10;fi&#10;&#10;rm -rf &quot;${DESTINATION_SAMPLE_PATH}&quot;&#10;mkdir -p &quot;${DESTINATION_SAMPLE_PATH}&quot;&#10;/bin/cp -R &quot;${FRAMEWORK_PATH}&quot; &quot;${DESTINATION_SAMPLE_PATH}&quot;&#10;/bin/cp -R &quot;${PROJECT_DIR}/Samples&quot; &quot;${DESTINATION_SAMPLE_PATH}&quot;&#10;&#10;/usr/libexec/PlistBuddy -c &quot;Set :applicationReleaseUploadPath ${OPENPEER_REGISTERED_APPLICATION_UPLOAD_PATH}&quot; &quot;${DESTINATION_SAMPLE_PATH}/Samples/OpenPeerSampleApp/OpenPeerSampleApp/CustomerSpecific.plist&quot;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: applicationReleaseUploadPath value is not cleared&quot; &gt;&gt; $LOG&#10;#exit 1&#10;else&#10;echo &quot;info: applicationReleaseUploadPath value is cleared&quot; &gt;&gt; $LOG&#10;fi&#10;&#10;/usr/libexec/PlistBuddy -c &quot;Set :applicationName ${OPENPEER_REGISTERED_APPLICATION_NAME}&quot; &quot;${DESTINATION_SAMPLE_PATH}/Samples/OpenPeerSampleApp/OpenPeerSampleApp/CustomerSpecific.plist&quot;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: applicationName is not set properly&quot; &gt;&gt; $LOG&#10;exit 1&#10;else&#10;echo &quot;info: applicationName is set&quot; &gt;&gt; $LOG&#10;fi&#10;/usr/libexec/PlistBuddy -c &quot;Set :applicationID ${OPENPEER_REGISTERED_APPLICATION_ID}&quot; &quot;${DESTINATION_SAMPLE_PATH}/Samples/OpenPeerSampleApp/OpenPeerSampleApp/CustomerSpecific.plist&quot;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: applicationId is not set properly&quot; &gt;&gt; $LOG&#10;exit 1&#10;else&#10;echo &quot;info: applicationId is set&quot; &gt;&gt; $LOG&#10;fi&#10;/usr/libexec/PlistBuddy -c &quot;Set :applicationSharedSecret ${OPENPEER_REGISTERED_APPLICATION_SHARED_SECRET}&quot; &quot;${DESTINATION_SAMPLE_PATH}/Samples/OpenPeerSampleApp/OpenPeerSampleApp/CustomerSpecific.plist&quot;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: applicationIdSharedSecret is not set properly&quot; &gt;&gt; $LOG&#10;exit 1&#10;else&#10;echo &quot;info: applicationIdSharedSecret is set&quot; &gt;&gt; $LOG&#10;fi&#10;&#10;&#10;/usr/libexec/PlistBuddy -c &quot;Set :APNS-UrbanAirShip:apiPushURL ${OPENPEER_REGISTERED_APPLICATION_UPLOAD_UA_URL}&quot; &quot;${DESTINATION_SAMPLE_PATH}/Samples/OpenPeerSampleApp/OpenPeerSampleApp/CustomerSpecific.plist&quot;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: apiPushURL is not set properly&quot; &gt;&gt; $LOG&#10;#exit 1&#10;else&#10;echo &quot;info: apiPushURL is set&quot; &gt;&gt; $LOG&#10;fi&#10;/usr/libexec/PlistBuddy -c &quot;Set :APNS-UrbanAirShip:masterAppSecret ${OPENPEER_REGISTERED_APPLICATION_UA_MASTER_SECRET}&quot; &quot;${DESTINATION_SAMPLE_PATH}/Samples/OpenPeerSampleApp/OpenPeerSampleApp/CustomerSpecific.plist&quot;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: masterAppSecret is not set properly&quot; &gt;&gt; $LOG&#10;#exit 1&#10;else&#10;echo &quot;info: masterAppSecret is set&quot; &gt;&gt; $LOG&#10;fi&#10;/usr/libexec/PlistBuddy -c &quot;Set :APNS-UrbanAirShip:productionAppKey ${OPENPEER_REGISTERED_APPLICATION_UA_KEY}&quot; &quot;${DESTINATION_SAMPLE_PATH}/Samples/OpenPeerSampleApp/OpenPeerSampleApp/CustomerSpecific.plist&quot;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: productionAppKey is not set properly&quot; &gt;&gt; $LOG&#10;#exit 1&#10;else&#10;echo &quot;info: apiPushURL is set&quot; &gt;&gt; $LOG&#10;fi&#10;/usr/libexec/PlistBuddy -c &quot;Set :APNS-UrbanAirShip:productionAppSecret ${OPENPEER_REGISTERED_APPLICATION_UA_APP_SECRET}&quot; &quot;${DESTINATION_SAMPLE_PATH}/Samples/OpenPeerSampleApp/OpenPeerSampleApp/CustomerSpecific.plist&quot;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: productionAppSecret is not set properly&quot; &gt;&gt; $LOG&#10;#exit 1&#10;else&#10;echo &quot;info: productionAppSecret is set&quot; &gt;&gt; $LOG&#10;fi&#10;&#10;/usr/libexec/PlistBuddy -c &quot;Set :APNS-UrbanAirShip:developmentAppKey ${OPENPEER_REGISTERED_APPLICATION_UA_KEY}&quot; &quot;${DESTINATION_SAMPLE_PATH}/Samples/OpenPeerSampleApp/OpenPeerSampleApp/CustomerSpecific.plist&quot;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: developmentAppKey is not set properly&quot; &gt;&gt; $LOG&#10;#exit 1&#10;else&#10;echo &quot;info: developmentAppKey is set&quot; &gt;&gt; $LOG&#10;fi&#10;/usr/libexec/PlistBuddy -c &quot;Set :APNS-UrbanAirShip:developmentAppSecret ${OPENPEER_REGISTERED_APPLICATION_UA_APP_SECRET}&quot; &quot;${DESTINATION_SAMPLE_PATH}/Samples/OpenPeerSampleApp/OpenPeerSampleApp/CustomerSpecific.plist&quot;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: developmentAppSecret is not set properly&quot; &gt;&gt; $LOG&#10;#exit 1&#10;else&#10;echo &quot;info: developmentAppSecret is set&quot; &gt;&gt; $LOG&#10;fi&#10;/usr/libexec/PlistBuddy -c &quot;Set :APNS-UrbanAirShip:masterAppSecretDev ${OPENPEER_REGISTERED_APPLICATION_UA_MASTER_SECRET}&quot; &quot;${DESTINATION_SAMPLE_PATH}/Samples/OpenPeerSampleApp/OpenPeerSampleApp/CustomerSpecific.plist&quot;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: masterAppSecretDev is not set properly&quot; &gt;&gt; $LOG&#10;#exit 1&#10;else&#10;echo &quot;info: masterAppSecretDev is set&quot; &gt;&gt; $LOG&#10;fi&#10;&#10;&#10;#ditto  --keepParent &quot;${PROJECT_DIR}/${PRODUCT_NAME}.framework&quot; &quot;${SAMPLEPROJECT_PATH}&quot; &quot;${DESTINATION_SAMPLE_PATH}&quot;&#10;&#10;#zip -r &quot;${DESTINATION_PATH}/${FRAMEWORK_NAME}.zip&quot; &quot;${FRAMEWORK_PATH}&quot;&#10;ditto -ck --rsrc --sequesterRsrc --keepParent &quot;${FRAMEWORK_PATH}&quot; &quot;${DESTINATION_PATH}/${FRAMEWORK_NAME}.zip&quot;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: Commpressing framework has failed&quot; &gt;&gt; $LOG&#10;exit 1&#10;else&#10;echo &quot;info: Framework has been commpressed successfully&quot; &gt;&gt; $LOG&#10;fi&#10;&#10;#Pack sample project&#10;#ditto -ck --rsrc --sequesterRsrc --keepParent &quot;${SAMPLEPROJECT_PATH}&quot; &quot;${DESTINATION_PATH}/${SAMPLEAPPLICATION_NAME}.zip&quot;&#10;ditto -ck --rsrc --sequesterRsrc --keepParent &quot;${DESTINATION_SAMPLE_PATH}&quot; &quot;${DESTINATION_PATH}/${SAMPLEAPPLICATION_NAME}.zip&quot;&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: Commpressing sample project&quot; &gt;&gt; $LOG&#10;exit 1&#10;else&#10;echo &quot;info: Sample project has been commpressed successfully&quot; &gt;&gt; $LOG&#10;fi&#10;&#10;if (( UPLOAD_URL_SIZE&gt;0 )); then&#10;#/usr/local/bin/s3cmd put --acl-public --force --guess-mime-type &quot;${DESTINATION_PATH}/${FRAMEWORK_NAME}.zip&quot; &quot;s3://assets.hookflash.me/github.com-openpeer-opios/OPiOS_SDK_Builds/${FRAMEWORK_NAME}.zip&quot; &gt;&gt; $LOG&#10;/usr/local/bin/s3cmd put --acl-public --force --guess-mime-type &quot;${DESTINATION_PATH}/${FRAMEWORK_NAME}.zip&quot; &quot;${UPLOAD_URL}/${FRAMEWORK_NAME}.zip&quot; &gt;&gt; $LOG&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: Upload to server has failed&quot; &gt;&gt; $LOG&#10;exit 1&#10;else&#10;echo &quot;info: Framework has been uploaded to server&quot; &gt;&gt; $LOG&#10;fi&#10;&#10;/usr/local/bin/s3cmd put --acl-public --force --guess-mime-type &quot;${DESTINATION_PATH}/${SAMPLEAPPLICATION_NAME}.zip&quot; &quot;${UPLOAD_URL}/${SAMPLEAPPLICATION_NAME}.zip&quot; &gt;&gt; $LOG&#10;if [ $? -eq 1 ]; then&#10;echo &quot;error: Upload to server has failed&quot; &gt;&gt; $LOG&#10;exit 1&#10;else&#10;echo &quot;info: Framework has been uploaded to server&quot; &gt;&gt; $LOG&#10;fi&#10;&#10;else&#10;echo &quot;Upload URL is not set&quot; &gt;&gt; $LOG&#10;fi">
               <EnvironmentBuildable>
                  <BuildableReference
                     BuildableIdentifier = "primary"
                     BlueprintIdentifier = "8792E86716519CFF00DEAC58"
                     BuildableName = "libOpenPeerSDK.a"
                     BlueprintName = "OpenPeerSDK"
                     ReferencedContainer = "container:openpeer-ios-sdk.xcodeproj">
                  </BuildableReference>
               </EnvironmentBuildable>
            </ActionContent>
         </ExecutionAction>
      </PostActions>
   </ArchiveAction>
</Scheme>
